{
  "config": {
    "configFile": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/playwright.config.ci.ts",
    "rootDir": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests",
    "forbidOnly": true,
    "fullyParallel": true,
    "globalSetup": null,
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 3
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "github",
        null
      ],
      [
        "html",
        {
          "open": "never"
        }
      ],
      [
        "json",
        {
          "outputFile": "test-results.json"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 300000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/test-results",
        "repeatEach": 1,
        "retries": 1,
        "metadata": {
          "actualWorkers": 3
        },
        "id": "chromium",
        "name": "chromium",
        "testDir": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "updateSourceMethod": "patch",
    "version": "1.51.1",
    "workers": 3,
    "webServer": {
      "command": "cd ../web && pnpm build && pnpm start",
      "url": "http://localhost:3000",
      "reuseExistingServer": false,
      "timeout": 180000,
      "env": {
        "NODE_ENV": "production",
        "NEXT_TELEMETRY_DISABLED": "1",
        "NEXT_PUBLIC_SENTRY_DSN": "",
        "SENTRY_AUTH_TOKEN": "",
        "LOG_LEVEL": "error"
      }
    }
  },
  "suites": [
    {
      "title": "home.spec.ts",
      "file": "home.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Homepage",
          "file": "home.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "should load successfully",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 5446,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:44.182Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "d318381359a9b96acb1e-eb3a1490654b706c13aa",
              "file": "home.spec.ts",
              "line": 4,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "interactions.spec.ts",
      "file": "interactions.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "User Interactions",
          "file": "interactions.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "search functionality should work",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 5589,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:44.184Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-267ed8c043e7ed26f71f",
              "file": "interactions.spec.ts",
              "line": 4,
              "column": 7
            },
            {
              "title": "category filtering should work",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 5581,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:44.184Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-f4133e0520c2fd1afb4f",
              "file": "interactions.spec.ts",
              "line": 22,
              "column": 7
            },
            {
              "title": "load more functionality should work",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 4792,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:49.853Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-f2d9f4bbedc56078117a",
              "file": "interactions.spec.ts",
              "line": 35,
              "column": 7
            },
            {
              "title": "theme toggle should work if available",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 3919,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:49.991Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-2397b39a2c3f5bace72d",
              "file": "interactions.spec.ts",
              "line": 50,
              "column": 7
            }
          ]
        },
        {
          "title": "Navigation Interactions",
          "file": "interactions.spec.ts",
          "line": 64,
          "column": 6,
          "specs": [
            {
              "title": "footer links should work",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 3552,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:49.993Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-eb75d0a1d54dcc9847ed",
              "file": "interactions.spec.ts",
              "line": 65,
              "column": 7
            },
            {
              "title": "breadcrumb navigation should work if present",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 3045,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:53.549Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-4a0c18a387ec225a0722",
              "file": "interactions.spec.ts",
              "line": 79,
              "column": 7
            },
            {
              "title": "back to top functionality should work if available",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 4597,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:53.915Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-b020eeb543fb64bd48a1",
              "file": "interactions.spec.ts",
              "line": 97,
              "column": 7
            }
          ]
        },
        {
          "title": "Form Interactions",
          "file": "interactions.spec.ts",
          "line": 119,
          "column": 6,
          "specs": [
            {
              "title": "newsletter signup should work if available",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 2424,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:54.657Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-6f6761c5a8610ee688ab",
              "file": "interactions.spec.ts",
              "line": 120,
              "column": 7
            },
            {
              "title": "contact form should work if available",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 872,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:56.599Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-328682d4f184d04e397d",
              "file": "interactions.spec.ts",
              "line": 139,
              "column": 7
            }
          ]
        },
        {
          "title": "External Links",
          "file": "interactions.spec.ts",
          "line": 169,
          "column": 6,
          "specs": [
            {
              "title": "external links should open correctly",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 2989,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:57.093Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-5236d8d833d80ef42f5d",
              "file": "interactions.spec.ts",
              "line": 170,
              "column": 7
            }
          ]
        },
        {
          "title": "Mobile Interactions",
          "file": "interactions.spec.ts",
          "line": 188,
          "column": 6,
          "specs": [
            {
              "title": "mobile menu should work",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 3257,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:57.474Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-bdaf15407356e7395d19",
              "file": "interactions.spec.ts",
              "line": 194,
              "column": 7
            },
            {
              "title": "mobile search should work",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 2095,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:54:58.517Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "e3a1181bd00640addebc-80c787e1e6f7e90352e0",
              "file": "interactions.spec.ts",
              "line": 215,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "minimal.spec.ts",
      "file": "minimal.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Minimal Tests",
          "file": "minimal.spec.ts",
          "line": 4,
          "column": 6,
          "specs": [
            {
              "title": "homepage loads",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 2502,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:00.090Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "f3bb0f060ea75a3eb8eb-3c01fbadce8bdb2f5afd",
              "file": "minimal.spec.ts",
              "line": 10,
              "column": 7
            },
            {
              "title": "about page loads",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 1282,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:00.617Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "f3bb0f060ea75a3eb8eb-af707d479ebf4ea59c66",
              "file": "minimal.spec.ts",
              "line": 19,
              "column": 7
            },
            {
              "title": "search works",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 2555,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:00.744Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "f3bb0f060ea75a3eb8eb-7f0df3a0b52600283c6f",
              "file": "minimal.spec.ts",
              "line": 27,
              "column": 7
            },
            {
              "title": "mobile responsive",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 2232,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:01.905Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "f3bb0f060ea75a3eb8eb-54cac0b041b7218baaab",
              "file": "minimal.spec.ts",
              "line": 35,
              "column": 7
            },
            {
              "title": "404 returns appropriate status",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1285,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:02.596Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "f3bb0f060ea75a3eb8eb-0cbf13482cb99982687c",
              "file": "minimal.spec.ts",
              "line": 41,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "pages.spec.ts",
      "file": "pages.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Main Pages",
          "file": "pages.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "homepage should load and display key elements",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 2052,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:03.306Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-bcb4305ab7cbe18c678e",
              "file": "pages.spec.ts",
              "line": 4,
              "column": 7
            },
            {
              "title": "about page should load and display content",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 964,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:03.887Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-0fab3dc9cdac16a63a1b",
              "file": "pages.spec.ts",
              "line": 29,
              "column": 7
            },
            {
              "title": "guides page should load and display guides",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 1023,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:04.143Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-2129337e6a384d079464",
              "file": "pages.spec.ts",
              "line": 39,
              "column": 7
            },
            {
              "title": "websites page should load and display website list",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 14673,
                      "error": {
                        "message": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveTitle\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator(':root')\nExpected pattern: \u001b[32m/Websites.*llms\\.txt hub/i\u001b[39m\nReceived string:  \u001b[31m\"Discover AI-Ready Documentation - llms.txt hub\"\u001b[39m\nCall log:\n\u001b[2m  - expect.toHaveTitle with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for locator(':root')\u001b[22m\n\u001b[2m    13 × locator resolved to <html lang=\"en\" class=\"light\">…</html>\u001b[22m\n\u001b[2m       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\"\u001b[22m\n",
                        "stack": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveTitle\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator(':root')\nExpected pattern: \u001b[32m/Websites.*llms\\.txt hub/i\u001b[39m\nReceived string:  \u001b[31m\"Discover AI-Ready Documentation - llms.txt hub\"\u001b[39m\nCall log:\n\u001b[2m  - expect.toHaveTitle with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for locator(':root')\u001b[22m\n\u001b[2m    13 × locator resolved to <html lang=\"en\" class=\"light\">…</html>\u001b[22m\n\u001b[2m       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\"\u001b[22m\n\n    at /Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts:54:24",
                        "matcherResult": {
                          "name": "toHaveTitle",
                          "expected": {},
                          "message": "\u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveTitle\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator(':root')\nExpected pattern: \u001b[32m/Websites.*llms\\.txt hub/i\u001b[39m\nReceived string:  \u001b[31m\"Discover AI-Ready Documentation - llms.txt hub\"\u001b[39m\nCall log:\n\u001b[2m  - expect.toHaveTitle with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for locator(':root')\u001b[22m\n\u001b[2m    13 × locator resolved to <html lang=\"en\" class=\"light\">…</html>\u001b[22m\n\u001b[2m       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\"\u001b[22m\n",
                          "pass": false,
                          "actual": "Discover AI-Ready Documentation - llms.txt hub",
                          "log": [
                            "  - expect.toHaveTitle with timeout 10000ms",
                            "  - waiting for locator(':root')",
                            "    13 × locator resolved to <html lang=\"en\" class=\"light\">…</html>",
                            "       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\""
                          ],
                          "timeout": 10000
                        },
                        "location": {
                          "file": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts",
                          "column": 24,
                          "line": 54
                        },
                        "snippet": "  52 |     await page.goto('/websites')\n  53 |\n> 54 |     await expect(page).toHaveTitle(/Websites.*llms\\.txt hub/i)\n     |                        ^\n  55 |     await expect(page.getByRole('heading', { level: 1 })).toBeVisible()\n  56 |\n  57 |     // Check for search/filter functionality - search input"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts",
                            "column": 24,
                            "line": 54
                          },
                          "message": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveTitle\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator(':root')\nExpected pattern: \u001b[32m/Websites.*llms\\.txt hub/i\u001b[39m\nReceived string:  \u001b[31m\"Discover AI-Ready Documentation - llms.txt hub\"\u001b[39m\nCall log:\n\u001b[2m  - expect.toHaveTitle with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for locator(':root')\u001b[22m\n\u001b[2m    13 × locator resolved to <html lang=\"en\" class=\"light\">…</html>\u001b[22m\n\u001b[2m       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\"\u001b[22m\n\n\n  52 |     await page.goto('/websites')\n  53 |\n> 54 |     await expect(page).toHaveTitle(/Websites.*llms\\.txt hub/i)\n     |                        ^\n  55 |     await expect(page.getByRole('heading', { level: 1 })).toBeVisible()\n  56 |\n  57 |     // Check for search/filter functionality - search input\n    at /Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts:54:24"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:04.856Z",
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/test-results/pages-Main-Pages-websites--b274e-ad-and-display-website-list-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/test-results/pages-Main-Pages-websites--b274e-ad-and-display-website-list-chromium/video.webm"
                        },
                        {
                          "name": "_prompt-0",
                          "contentType": "text/markdown",
                          "body": ""
                        },
                        {
                          "name": "trace",
                          "contentType": "application/zip",
                          "path": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/test-results/pages-Main-Pages-websites--b274e-ad-and-display-website-list-chromium/trace.zip"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts",
                        "column": 24,
                        "line": 54
                      }
                    },
                    {
                      "workerIndex": 3,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 12315,
                      "error": {
                        "message": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveTitle\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator(':root')\nExpected pattern: \u001b[32m/Websites.*llms\\.txt hub/i\u001b[39m\nReceived string:  \u001b[31m\"Discover AI-Ready Documentation - llms.txt hub\"\u001b[39m\nCall log:\n\u001b[2m  - expect.toHaveTitle with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for locator(':root')\u001b[22m\n\u001b[2m    - waiting for\" http://localhost:3000/\" navigation to finish...\u001b[22m\n\u001b[2m    - navigated to \"http://localhost:3000/\"\u001b[22m\n\u001b[2m    12 × locator resolved to <html lang=\"en\" class=\"light\">…</html>\u001b[22m\n\u001b[2m       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\"\u001b[22m\n",
                        "stack": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveTitle\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator(':root')\nExpected pattern: \u001b[32m/Websites.*llms\\.txt hub/i\u001b[39m\nReceived string:  \u001b[31m\"Discover AI-Ready Documentation - llms.txt hub\"\u001b[39m\nCall log:\n\u001b[2m  - expect.toHaveTitle with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for locator(':root')\u001b[22m\n\u001b[2m    - waiting for\" http://localhost:3000/\" navigation to finish...\u001b[22m\n\u001b[2m    - navigated to \"http://localhost:3000/\"\u001b[22m\n\u001b[2m    12 × locator resolved to <html lang=\"en\" class=\"light\">…</html>\u001b[22m\n\u001b[2m       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\"\u001b[22m\n\n    at /Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts:54:24",
                        "matcherResult": {
                          "name": "toHaveTitle",
                          "expected": {},
                          "message": "\u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveTitle\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator(':root')\nExpected pattern: \u001b[32m/Websites.*llms\\.txt hub/i\u001b[39m\nReceived string:  \u001b[31m\"Discover AI-Ready Documentation - llms.txt hub\"\u001b[39m\nCall log:\n\u001b[2m  - expect.toHaveTitle with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for locator(':root')\u001b[22m\n\u001b[2m    - waiting for\" http://localhost:3000/\" navigation to finish...\u001b[22m\n\u001b[2m    - navigated to \"http://localhost:3000/\"\u001b[22m\n\u001b[2m    12 × locator resolved to <html lang=\"en\" class=\"light\">…</html>\u001b[22m\n\u001b[2m       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\"\u001b[22m\n",
                          "pass": false,
                          "actual": "Discover AI-Ready Documentation - llms.txt hub",
                          "log": [
                            "  - expect.toHaveTitle with timeout 10000ms",
                            "  - waiting for locator(':root')",
                            "    - waiting for\" http://localhost:3000/\" navigation to finish...",
                            "    - navigated to \"http://localhost:3000/\"",
                            "    12 × locator resolved to <html lang=\"en\" class=\"light\">…</html>",
                            "       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\""
                          ],
                          "timeout": 10000
                        },
                        "location": {
                          "file": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts",
                          "column": 24,
                          "line": 54
                        },
                        "snippet": "  52 |     await page.goto('/websites')\n  53 |\n> 54 |     await expect(page).toHaveTitle(/Websites.*llms\\.txt hub/i)\n     |                        ^\n  55 |     await expect(page.getByRole('heading', { level: 1 })).toBeVisible()\n  56 |\n  57 |     // Check for search/filter functionality - search input"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts",
                            "column": 24,
                            "line": 54
                          },
                          "message": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveTitle\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator(':root')\nExpected pattern: \u001b[32m/Websites.*llms\\.txt hub/i\u001b[39m\nReceived string:  \u001b[31m\"Discover AI-Ready Documentation - llms.txt hub\"\u001b[39m\nCall log:\n\u001b[2m  - expect.toHaveTitle with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for locator(':root')\u001b[22m\n\u001b[2m    - waiting for\" http://localhost:3000/\" navigation to finish...\u001b[22m\n\u001b[2m    - navigated to \"http://localhost:3000/\"\u001b[22m\n\u001b[2m    12 × locator resolved to <html lang=\"en\" class=\"light\">…</html>\u001b[22m\n\u001b[2m       - unexpected value \"Discover AI-Ready Documentation - llms.txt hub\"\u001b[22m\n\n\n  52 |     await page.goto('/websites')\n  53 |\n> 54 |     await expect(page).toHaveTitle(/Websites.*llms\\.txt hub/i)\n     |                        ^\n  55 |     await expect(page.getByRole('heading', { level: 1 })).toBeVisible()\n  56 |\n  57 |     // Check for search/filter functionality - search input\n    at /Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts:54:24"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-31T18:55:23.205Z",
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/test-results/pages-Main-Pages-websites--b274e-ad-and-display-website-list-chromium-retry1/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/test-results/pages-Main-Pages-websites--b274e-ad-and-display-website-list-chromium-retry1/video.webm"
                        },
                        {
                          "name": "_prompt-0",
                          "contentType": "text/markdown",
                          "body": ""
                        },
                        {
                          "name": "trace",
                          "contentType": "application/zip",
                          "path": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/test-results/pages-Main-Pages-websites--b274e-ad-and-display-website-list-chromium-retry1/trace.zip"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/thedaviddias/Projects/llms-txt-hub/apps/e2e/tests/pages.spec.ts",
                        "column": 24,
                        "line": 54
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-398703802424b3d171db",
              "file": "pages.spec.ts",
              "line": 51,
              "column": 7
            },
            {
              "title": "members page should load and display member list",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 1687,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:05.169Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-e47e976d182fec8806df",
              "file": "pages.spec.ts",
              "line": 66,
              "column": 7
            },
            {
              "title": "projects page should load and display projects",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 1019,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:05.361Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-74a72dbebd659ef9af22",
              "file": "pages.spec.ts",
              "line": 77,
              "column": 7
            },
            {
              "title": "faq page should load and display FAQ content",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 950,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:06.389Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-a529486ff63d60c24c8f",
              "file": "pages.spec.ts",
              "line": 84,
              "column": 7
            },
            {
              "title": "news page should load and display news items",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 656,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:06.858Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-4925859446ccd0a9e69e",
              "file": "pages.spec.ts",
              "line": 98,
              "column": 7
            }
          ]
        },
        {
          "title": "Category Pages",
          "file": "pages.spec.ts",
          "line": 106,
          "column": 6,
          "specs": [
            {
              "title": "developer-tools category should load",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 978,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:07.345Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-215d48381325602931cf",
              "file": "pages.spec.ts",
              "line": 107,
              "column": 7
            },
            {
              "title": "featured category should load",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 664,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:07.519Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-51f644501da901cc993c",
              "file": "pages.spec.ts",
              "line": 114,
              "column": 7
            }
          ]
        },
        {
          "title": "Search and Navigation",
          "file": "pages.spec.ts",
          "line": 122,
          "column": 6,
          "specs": [
            {
              "title": "search page should work with query parameter",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 1420,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:08.187Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-a9e4cbdbf07c4c49720f",
              "file": "pages.spec.ts",
              "line": 123,
              "column": 7
            },
            {
              "title": "navigation should work between pages",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 3702,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:08.326Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-852b747439754a0e6bf2",
              "file": "pages.spec.ts",
              "line": 133,
              "column": 7
            }
          ]
        },
        {
          "title": "Legal Pages",
          "file": "pages.spec.ts",
          "line": 153,
          "column": 6,
          "specs": [
            {
              "title": "privacy policy should load",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 742,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:09.610Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-bd76bee79f0e5e9a227d",
              "file": "pages.spec.ts",
              "line": 154,
              "column": 7
            },
            {
              "title": "terms of service should load",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 907,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:10.357Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-2e0cad16de71334d60f7",
              "file": "pages.spec.ts",
              "line": 164,
              "column": 7
            },
            {
              "title": "cookies policy should load",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 779,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:11.268Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-2a698aaed1dd9b96fbb1",
              "file": "pages.spec.ts",
              "line": 174,
              "column": 7
            }
          ]
        },
        {
          "title": "Error Pages",
          "file": "pages.spec.ts",
          "line": 185,
          "column": 6,
          "specs": [
            {
              "title": "404 page should display for non-existent routes",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 623,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:12.044Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-9f07a7fea921d9cbb415",
              "file": "pages.spec.ts",
              "line": 186,
              "column": 7
            }
          ]
        },
        {
          "title": "Responsive Design",
          "file": "pages.spec.ts",
          "line": 196,
          "column": 6,
          "specs": [
            {
              "title": "homepage should work on mobile",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 2265,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:12.049Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-2538581cfd41f5b02e2b",
              "file": "pages.spec.ts",
              "line": 197,
              "column": 7
            }
          ]
        },
        {
          "title": "Performance and Accessibility",
          "file": "pages.spec.ts",
          "line": 207,
          "column": 6,
          "specs": [
            {
              "title": "homepage should load within reasonable time",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 1860,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:12.669Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-6e65fad3b7822dce9af2",
              "file": "pages.spec.ts",
              "line": 208,
              "column": 7
            },
            {
              "title": "pages should have proper accessibility attributes",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 2368,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:14.317Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "9bb6bb2ed574bebb3c58-d3dcf6b98ad4e4d953a7",
              "file": "pages.spec.ts",
              "line": 218,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "simple.spec.ts",
      "file": "simple.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Basic Page Load Tests",
          "file": "simple.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "homepage loads",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 2164,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:14.541Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-7bc9d60c201f3f7a36c2",
              "file": "simple.spec.ts",
              "line": 10,
              "column": 7
            },
            {
              "title": "about page loads",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 511,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:16.690Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-4b7d04ecee9c9f5253d3",
              "file": "simple.spec.ts",
              "line": 20,
              "column": 7
            },
            {
              "title": "guides page loads",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 486,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:16.708Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-3a56403b6c6b66909725",
              "file": "simple.spec.ts",
              "line": 28,
              "column": 7
            },
            {
              "title": "websites page loads",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 1714,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:17.196Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-a666f5385df3e949766b",
              "file": "simple.spec.ts",
              "line": 38,
              "column": 7
            },
            {
              "title": "members page loads",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 1329,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:17.205Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-5b66906330803af4935c",
              "file": "simple.spec.ts",
              "line": 47,
              "column": 7
            },
            {
              "title": "search functionality exists",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 2369,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:18.541Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-32ae4463428b5656e2fc",
              "file": "simple.spec.ts",
              "line": 56,
              "column": 7
            },
            {
              "title": "404 page handles non-existent routes",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 718,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:18.912Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-2fc42070db1e3ed45a5f",
              "file": "simple.spec.ts",
              "line": 67,
              "column": 7
            }
          ]
        },
        {
          "title": "Navigation Tests",
          "file": "simple.spec.ts",
          "line": 79,
          "column": 6,
          "specs": [
            {
              "title": "can navigate between pages",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 1936,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:19.634Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-0f859df372a76c9f61e8",
              "file": "simple.spec.ts",
              "line": 80,
              "column": 7
            }
          ]
        },
        {
          "title": "Responsive Tests",
          "file": "simple.spec.ts",
          "line": 107,
          "column": 6,
          "specs": [
            {
              "title": "homepage works on mobile viewport",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 1783,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:20.918Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "b095e72a376a9d09f724-a822835796df14dd7e21",
              "file": "simple.spec.ts",
              "line": 108,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "smoke.spec.ts",
      "file": "smoke.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Smoke Tests",
          "file": "smoke.spec.ts",
          "line": 4,
          "column": 6,
          "specs": [
            {
              "title": "critical pages load successfully",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 4463,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:21.581Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4219922fea2e2bd3c691-0580a324b701f4cce8e9",
              "file": "smoke.spec.ts",
              "line": 11,
              "column": 7
            },
            {
              "title": "search functionality exists and works",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 4236,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:22.705Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4219922fea2e2bd3c691-2711fbe859eda24d1b37",
              "file": "smoke.spec.ts",
              "line": 41,
              "column": 7
            },
            {
              "title": "navigation links work",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 4213,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:26.047Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4219922fea2e2bd3c691-54fe4aa572aa8d76a1e8",
              "file": "smoke.spec.ts",
              "line": 63,
              "column": 7
            },
            {
              "title": "responsive design works on mobile",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 2026,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:26.944Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4219922fea2e2bd3c691-70218ced429299a2d10d",
              "file": "smoke.spec.ts",
              "line": 86,
              "column": 7
            },
            {
              "title": "404 handling works",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 366,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:28.973Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4219922fea2e2bd3c691-be9c847be62b6f919723",
              "file": "smoke.spec.ts",
              "line": 109,
              "column": 7
            },
            {
              "title": "external links have proper attributes",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 1902,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:29.341Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4219922fea2e2bd3c691-f37682b760c21afdd9b7",
              "file": "smoke.spec.ts",
              "line": 120,
              "column": 7
            },
            {
              "title": "forms are interactive",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 2465,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:30.265Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4219922fea2e2bd3c691-4bdcaadec589a5ff207c",
              "file": "smoke.spec.ts",
              "line": 139,
              "column": 7
            },
            {
              "title": "images load correctly",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 2680,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-31T18:55:31.247Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4219922fea2e2bd3c691-047df605c141ed2381c7",
              "file": "smoke.spec.ts",
              "line": 156,
              "column": 7
            }
          ]
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2025-08-31T18:54:07.444Z",
    "duration": 89050.971,
    "expected": 53,
    "skipped": 0,
    "unexpected": 1,
    "flaky": 0
  }
}