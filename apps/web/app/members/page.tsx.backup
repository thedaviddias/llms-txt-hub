import { Avatar, AvatarFallback, AvatarImage } from '@thedaviddias/design-system/avatar'
import { Badge } from '@thedaviddias/design-system/badge'
import { Calendar } from 'lucide-react'
import Link from 'next/link'
import { Card, CardContent } from '@/components/ui/card'
import { getMemberBadgeSync } from '@/lib/member-utils'
import { getCachedMembers, type Member } from '@/lib/member-server-utils'
import { MembersSearch } from './members-search'

// Enable Partial Prerendering for this page
export const experimental_ppr = true

// Dynamic when search params are present, static otherwise
export const revalidate = 1800 // Revalidate every 30 minutes

/**
 * Generate a URL-safe slug from user data
 *
 * @param user - Member object
 * @returns URL-safe slug string
 */
function generateSlugFromUser(user: Member): string {
  if (!user) return ''
  const username = user.username || user.publicMetadata?.github_username
  if (!username) return user.id
  return username
}

// Cache the members data with Next.js 15's unstable_cache
const getCachedMembers = unstable_cache(
  async (): Promise<Member[]> => {
    try {
      // Check if Clerk is properly configured
      if (!process.env.CLERK_SECRET_KEY) {
        logger.warn('CLERK_SECRET_KEY not configured, using demo data')

        // Return demo data for development
        return Array.from({ length: 200 }, (_, i) => ({
          id: `demo-user-${i + 1}`,
          firstName: `Demo`,
          lastName: `User ${i + 1}`,
          username: `demo_user_${i + 1}`,
          imageUrl: `https://api.dicebear.com/7.x/avataaars/svg?seed=demo-${i + 1}`,
          createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),
          publicMetadata: {
            github_username: Math.random() > 0.5 ? `github_demo_${i + 1}` : null,
            migrated_from: null
          }
        }))
      }

      // Fetch ALL users from Clerk (with batching for large datasets)
      const allUsers: Member[] = []
      let offset = 0
      const limit = 500

      while (true) {
        try {
          const response = await clerk.users.getUserList({
            limit,
            offset,
            orderBy: '-created_at'
          })

          if (!response.data || response.data.length === 0) break

          const validUsers = await Promise.all(
            response.data.filter(hasSharedInfo).map(async user => {
              const username = user.username || user.publicMetadata?.github_username
              let hasContributions = false

              if (username && typeof username === 'string') {
                try {
                  const { getUserContributions } = await import('@/lib/github-contributions')
                  const contributions = await getUserContributions(username)
                  hasContributions = contributions.total > 0

                  // Log for debugging
                  logger.info('Contribution check completed', {
                    data: { username, hasContributions, total: contributions.total },
                    tags: { type: 'members' }
                  })
                } catch (error) {
                  logger.warn('Contribution check failed', {
                    data: {
                      username,
                      error: error instanceof Error ? error.message : 'Unknown error'
                    },
                    tags: { type: 'members' }
                  })
                  hasContributions = false
                }
              }

              return {
                id: user.id,
                firstName: user.firstName,
                lastName: user.lastName,
                username: user.username,
                imageUrl: user.imageUrl,
                createdAt: user.createdAt
                  ? new Date(user.createdAt).toISOString()
                  : new Date().toISOString(),
                publicMetadata: {
                  github_username: (user.publicMetadata?.github_username as string) || null,
                  migrated_from: (user.publicMetadata?.migrated_from as string) || null,
                  isProfilePrivate: (user.publicMetadata?.isProfilePrivate as boolean) || false
                },
                hasContributions
              }
            })
          )

          allUsers.push(...validUsers)

          // If we got less than the limit, we've reached the end
          if (response.data.length < limit) break

          offset += limit
        } catch (error) {
          logger.error('Error fetching batch from Clerk:', {
            data: { error, offset },
            tags: { type: 'page' }
          })
          break
        }
      }

      logger.info('Fetched all members for static generation:', {
        data: { totalCount: allUsers.length },
        tags: { type: 'page' }
      })

      return allUsers
    } catch (error) {
      logger.error('Error fetching members:', { data: error, tags: { type: 'page' } })

      // Return demo data as fallback
      return Array.from({ length: 50 }, (_, i) => ({
        id: `fallback-user-${i + 1}`,
        firstName: `User`,
        lastName: `${i + 1}`,
        username: `user_${i + 1}`,
        imageUrl: `https://api.dicebear.com/7.x/avataaars/svg?seed=fallback-${i + 1}`,
        createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),
        publicMetadata: {
          github_username: Math.random() > 0.5 ? `github_user_${i + 1}` : null,
          migrated_from: null
        }
      }))
    }
  },
  ['all-members-v2'], // Changed cache key to force refresh
  {
    revalidate: 1800, // Cache for 30 minutes (shorter to see changes faster)
    tags: ['members']
  }
)

/**
 * Generate metadata for the members page
 *
 * @returns Metadata object for Next.js
 */
export async function generateMetadata() {
  const members = await getCachedMembers()

  return {
    title: `Members (${members.length}) | LLMs.txt Hub`,
    description: `Browse ${members.length} members of the LLMs.txt Hub community. Connect with developers, creators, and contributors.`,
    openGraph: {
      title: `${members.length} Members | LLMs.txt Hub`,
      description:
        'Join our growing community of developers and creators sharing their LLMs.txt files'
    }
  }
}

export default async function MembersPage({
  searchParams
}: {
  searchParams: Promise<{ search?: string; filter?: string; page?: string }>
}) {
  // Get all members (this will be cached and served statically)
  const allMembers = await getCachedMembers()

  // Await search params in Next.js 15
  const params = await searchParams

  // Apply client-side filtering based on search params
  const searchQuery = params.search?.toLowerCase() || ''
  const filterType = params.filter || 'all'

  // Debug logging
  logger.info('Members page filters:', {
    data: { searchQuery, filterType, hasSearchParams: Object.keys(params).length > 0 },
    tags: { type: 'page' }
  })

  const filteredMembers = allMembers.filter(member => {
    // Apply search filter
    if (searchQuery) {
      const displayName =
        member.firstName && member.lastName
          ? `${member.firstName} ${member.lastName}`.toLowerCase()
          : (member.firstName || member.lastName || member.username || '').toLowerCase()
      const username = (
        member.username ||
        member.publicMetadata?.github_username ||
        ''
      ).toLowerCase()

      if (!displayName.includes(searchQuery) && !username.includes(searchQuery)) {
        return false
      }
    }

    // Apply filter type
    if (filterType === 'contributors') {
      return member.hasContributions === true
    } else if (filterType === 'community') {
      return member.hasContributions === false || member.hasContributions === undefined
    }

    return true // 'all' filter
  })

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Community Members</h1>
        <p className="text-muted-foreground">
          {searchQuery || filterType !== 'all'
            ? `${filteredMembers.length} of ${allMembers.length} members`
            : `${allMembers.length} members and growing`}
        </p>
      </div>

      {/* Client-side search and filters */}
      <MembersSearch />

      {/* Static member grid with progressive enhancement */}
      <div className="mt-8 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4">
        {filteredMembers.length === 0 ? (
          <div className="col-span-full text-center py-12">
            <p className="text-muted-foreground">
              {searchQuery
                ? `No members found matching "${params.search}"`
                : `No ${filterType === 'contributors' ? 'contributors' : 'community members'} found`}
            </p>
          </div>
        ) : (
          filteredMembers.map(member => {
            const userSlug = generateSlugFromUser(member)
            const displayName =
              member.firstName && member.lastName
                ? `${member.firstName} ${member.lastName}`
                : member.firstName ||
                  member.lastName ||
                  member.username ||
                  `User ${member.id.slice(-6).toUpperCase()}`
            const username = member.username || member.publicMetadata?.github_username
            const badge = getMemberBadgeSync(member.hasContributions)

            // Parse the date - it might be a timestamp number as string or ISO string
            let joinDate = 'Member'
            if (member.createdAt) {
              // Try parsing as number first (timestamp)
              const timestamp = Number(member.createdAt)
              const date = !Number.isNaN(timestamp)
                ? new Date(timestamp)
                : new Date(member.createdAt)

              if (!Number.isNaN(date.getTime())) {
                joinDate = date.toLocaleDateString('en-US', {
                  month: 'short',
                  year: 'numeric'
                })
              }
            }

            return (
              <Card
                key={member.id}
                className="transition-all hover:border-primary hover:bg-muted/50"
              >
                <CardContent className="p-2">
                  <Link href={`/u/${userSlug}`} className="block text-center space-y-1">
                    <Avatar className="w-14 h-14 sm:w-16 sm:h-16 mx-auto">
                      {member.imageUrl ? (
                        <AvatarImage
                          src={member.imageUrl}
                          alt={`${displayName}'s profile picture - llms.txt hub community member`}
                        />
                      ) : (
                        <AvatarFallback className="text-base sm:text-lg">
                          {displayName.charAt(0).toUpperCase()}
                        </AvatarFallback>
                      )}
                    </Avatar>

                    <div className="space-y-1">
                      <h3 className="font-semibold text-base truncate">{displayName}</h3>
                      {username && (
                        <p className="text-sm text-muted-foreground truncate">@{username}</p>
                      )}
                      <div className="flex items-center justify-center">
                        <Badge variant={badge.variant} className="text-xs px-1.5 py-0.5">
                          {badge.label}
                        </Badge>
                      </div>
                    </div>

                    <div className="flex items-center justify-center gap-1.5 text-sm text-muted-foreground">
                      <Calendar className="w-3.5 h-3.5" />
                      <span>{joinDate}</span>
                    </div>
                  </Link>
                </CardContent>
              </Card>
            )
          })
        )}
      </div>
    </div>
  )
}
