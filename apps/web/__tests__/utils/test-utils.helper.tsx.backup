/**
 * Centralized Test Utilities
 *
 * This file provides shared utilities, custom render methods, and common test helpers
 * to ensure DRY principles and consistent testing patterns across the application.
 */

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { type RenderOptions, type RenderResult, render } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { ThemeProvider } from 'next-themes'
import type { ReactElement, ReactNode } from 'react'

// ============================================================================
// TEST CONSTANTS & VARIABLES
// ============================================================================

export const TEST_IDS = {
  // Navigation
  MAIN_NAVIGATION: 'main-navigation',
  USER_MENU: 'user-menu',
  MOBILE_MENU: 'mobile-menu',

  // Common Components
  LOADING_SPINNER: 'loading-spinner',
  ERROR_MESSAGE: 'error-message',
  SEARCH_INPUT: 'search-input',
  SUBMIT_BUTTON: 'submit-button',

  // Forms
  FORM_CONTAINER: 'form-container',
  INPUT_FIELD: 'input-field',
  SELECT_FIELD: 'select-field',
  CHECKBOX_FIELD: 'checkbox-field',

  // Profile
  PROFILE_HEADER: 'profile-header',
  PROFILE_AVATAR: 'profile-avatar',
  PROFILE_BADGE: 'profile-badge',
  EDIT_PROFILE_BUTTON: 'edit-profile-button',

  // Settings
  SETTINGS_FORM: 'settings-form',
  PRIVACY_TOGGLE: 'privacy-toggle',
  SAVE_SETTINGS_BUTTON: 'save-settings-button'
} as const

export const TEST_URLS = {
  HOME: '/',
  PROFILE: '/u/testuser',
  SETTINGS: '/settings',
  SUBMIT: '/submit',
  LOGIN: '/login',
  API: {
    USER_FAVORITES: '/api/user/favorites',
    CHECK_URL: '/api/check-url',
    FETCH_METADATA: '/api/fetch-metadata'
  }
} as const

export const TEST_TIMEOUTS = {
  SHORT: 1000,
  MEDIUM: 3000,
  LONG: 5000,
  ASYNC_OPERATION: 10000
} as const

// ============================================================================
// MOCK DATA FACTORIES
// ============================================================================

/**
 * Creates a mock user object for testing
 *
 * @param overrides - Optional properties to override default values
 * @returns Mock user object
 */
export const createMockUser = (overrides: Partial<any> = {}) => ({
  id: 'test-user-id',
  email: 'test@example.com',
  name: 'Test User',
  user_metadata: {
    user_name: 'testuser',
    avatar_url: 'https://example.com/avatar.jpg',
    ...overrides.user_metadata
  },
  publicMetadata: {
    isProfilePrivate: false,
    ...overrides.publicMetadata
  },
  createdAt: '2024-01-01T00:00:00Z',
  ...overrides
})

/**
 * Creates a mock project object for testing
 *
 * @param overrides - Optional properties to override default values
 * @returns Mock project object
 */
export const createMockProject = (overrides: Partial<any> = {}) => ({
  id: 'test-project-id',
  title: 'Test Project',
  description: 'A test project description',
  url: 'https://example.com',
  category: 'AI Tools',
  tags: ['ai', 'productivity'],
  submittedBy: 'testuser',
  createdAt: '2024-01-01T00:00:00Z',
  ...overrides
})

/**
 * Creates a mock API response object for testing
 *
 * @param data - Response data
 * @param overrides - Optional properties to override default values
 * @returns Mock API response object
 */
export function createMockApiResponse<T>(data: T, overrides: Partial<any> = {}) {
  return {
    success: true,
    data,
    message: 'Success',
    ...overrides
  }
}

/**
 * Creates a mock API error object for testing
 *
 * @param message - Error message
 * @param status - HTTP status code (default: 500)
 * @returns Mock API error object
 */
export const createMockApiError = (message = 'Test error', status = 500) => ({
  success: false,
  error: message,
  status
})

// ============================================================================
// CUSTOM RENDER METHODS
// ============================================================================

interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
  // Auth context options
  user?: any | null
  isAuthenticated?: boolean

  // Theme options
  theme?: 'light' | 'dark' | 'system'

  // Query client options
  queryClient?: QueryClient

  // Router options
  initialRoute?: string

  // Additional wrapper props
  wrapperProps?: Record<string, any>
}

/**
 * Custom render method that wraps components with necessary providers
 * Use this instead of RTL's render for consistent provider setup
 */
export function renderWithProviders(
  ui: ReactElement,
  options: CustomRenderOptions = {}
): RenderResult & { user: ReturnType<typeof userEvent.setup> } {
  const {
    user = null,
    isAuthenticated = false,
    theme = 'light',
    queryClient,
    wrapperProps = {},
    ...renderOptions
  } = options

  // Create a new QueryClient for each test to avoid state pollution
  const testQueryClient =
    queryClient ||
    new QueryClient({
      defaultOptions: {
        queries: { retry: false },
        mutations: { retry: false }
      }
    })

  // Mock auth context values are provided directly to ThemeProvider

  // Create wrapper component with all providers
  /**
   * Wrapper component that provides all necessary contexts for testing
   *
   * @param props - Component props including children
   * @returns React component with all providers
   */
  function AllTheProviders({ children }: { children: ReactNode }) {
    return (
      <QueryClientProvider client={testQueryClient}>
        <ThemeProvider
          attribute="class"
          defaultTheme={theme}
          enableSystem={false}
          {...wrapperProps}
        >
          {children}
        </ThemeProvider>
      </QueryClientProvider>
    )
  }

  const renderResult = render(ui, {
    wrapper: AllTheProviders,
    ...renderOptions
  })

  // Return render result with userEvent setup
  return {
    ...renderResult,
    user: userEvent.setup()
  }
}

// ============================================================================
// COMMON TEST HELPERS
// ============================================================================

/**
 * Wait for element to be removed from DOM
 */
export const waitForElementToBeRemoved = async (element: HTMLElement) => {
  const { waitForElementToBeRemoved: waitFor } = await import('@testing-library/react')
  return waitFor(element)
}

/**
 * Wait for loading states to complete
 */
export const waitForLoadingToComplete = async () => {
  const { waitFor } = await import('@testing-library/react')
  await waitFor(
    () => {
      const loadingElements = document.querySelectorAll('[data-testid*="loading"]')
      expect(loadingElements).toHaveLength(0)
    },
    { timeout: TEST_TIMEOUTS.MEDIUM }
  )
}

/**
 * Simulate network delay for async operations
 */
export const simulateNetworkDelay = (ms = 100) => new Promise(resolve => setTimeout(resolve, ms))

/**
 * Create a mock function that resolves after a delay
 */
export function createDelayedMock<T>(returnValue: T, delay = 100) {
  return jest
    .fn()
    .mockImplementation(() => new Promise(resolve => setTimeout(() => resolve(returnValue), delay)))
}

/**
 * Assert that element has correct accessibility attributes
 */
export const expectAccessibleElement = (element: HTMLElement) => {
  // Check for basic accessibility attributes
  const hasAriaLabel = element.hasAttribute('aria-label')
  const hasAriaLabelledBy = element.hasAttribute('aria-labelledby')
  const hasTitle = element.hasAttribute('title')

  expect(hasAriaLabel || hasAriaLabelledBy || hasTitle).toBe(true)

  // Check for proper role if it's an interactive element
  const interactiveTags = ['button', 'input', 'select', 'textarea', 'a']
  if (interactiveTags.includes(element.tagName.toLowerCase()) || element.hasAttribute('onclick')) {
    expect(element).not.toHaveAttribute('role', '')
  }
}

/**
 * Test form validation helper
 */
export const testFormValidation = async (
  form: HTMLFormElement,
  testCases: Array<{
    field: string
    value: string
    expectedError?: string
    shouldBeValid?: boolean
  }>
) => {
  const { fireEvent } = await import('@testing-library/react')

  for (const testCase of testCases) {
    const field = form.querySelector(`[name="${testCase.field}"]`) as HTMLInputElement

    // Clear and set new value
    fireEvent.change(field, { target: { value: testCase.value } })
    fireEvent.blur(field)

    if (testCase.expectedError) {
      const errorElement = form.querySelector(`[data-field-error="${testCase.field}"]`)
      expect(errorElement).toHaveTextContent(testCase.expectedError)
    }

    if (testCase.shouldBeValid) {
      const errorElement = form.querySelector(`[data-field-error="${testCase.field}"]`)
      expect(errorElement).toBeNull()
    }
  }
}

// ============================================================================
// MOCK GENERATORS
// ============================================================================

/**
 * Create mock fetch response
 */
export const createMockFetch = (
  mockData: any,
  options: { status?: number; delay?: number } = {}
) => {
  const { status = 200, delay = 0 } = options

  return jest.fn().mockImplementation(() =>
    Promise.resolve({
      ok: status >= 200 && status < 300,
      status,
      json: async () => {
        if (delay > 0) await simulateNetworkDelay(delay)
        return mockData
      },
      text: async () => JSON.stringify(mockData)
    })
  )
}

/**
 * Create mock IntersectionObserver
 */
export const createMockIntersectionObserver = () => {
  const mockIntersectionObserver = jest.fn()
  mockIntersectionObserver.mockReturnValue({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn()
  })
  window.IntersectionObserver = mockIntersectionObserver as any
  window.IntersectionObserverEntry = jest.fn() as any

  return mockIntersectionObserver
}

/**
 * Create mock ResizeObserver
 */
export const createMockResizeObserver = () => {
  const mockResizeObserver = jest.fn()
  mockResizeObserver.mockReturnValue({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn()
  })
  window.ResizeObserver = mockResizeObserver as any

  return mockResizeObserver
}

// ============================================================================
// TEST SUITE HELPERS
// ============================================================================

/**
 * Standard component test suite
 * Tests common component behaviors to ensure consistency
 */
export const runStandardComponentTests = (
  ComponentName: string,
  renderComponent: () => RenderResult,
  options: {
    shouldHaveAccessibleName?: boolean
    shouldSupportTheme?: boolean
    shouldHandleLoading?: boolean
  } = {}
) => {
  describe(`${ComponentName} - Standard Tests`, () => {
    it('renders without crashing', () => {
      expect(() => renderComponent()).not.toThrow()
    })

    it('matches snapshot', () => {
      const { container } = renderComponent()
      expect(container.firstChild).toMatchSnapshot()
    })

    if (options.shouldHaveAccessibleName) {
      it('has accessible name', () => {
        const { container } = renderComponent()
        const element = container.firstChild as HTMLElement
        expectAccessibleElement(element)
      })
    }

    if (options.shouldSupportTheme) {
      it('supports theme changes', () => {
        const { rerender, container } = renderComponent()

        // Test light theme
        expect(container.firstChild).toHaveClass('theme-light')

        // Test dark theme
        rerender(
          <ThemeProvider attribute="class" defaultTheme="dark">
            {container.firstChild as React.ReactNode}
          </ThemeProvider>
        )
        expect(container.firstChild).toHaveClass('theme-dark')
      })
    }
  })
}

/**
 * API route test helper
 */
export const testApiRoute = async (
  handler: Function,
  testCases: Array<{
    name: string
    request: Partial<Request>
    expectedStatus: number
    expectedResponse?: any
    setup?: () => void | Promise<void>
    cleanup?: () => void | Promise<void>
  }>
) => {
  for (const testCase of testCases) {
    it(testCase.name, async () => {
      // Setup
      if (testCase.setup) await testCase.setup()

      // Create mock request
      const mockRequest = {
        method: 'GET',
        url: 'http://localhost:3000/api/test',
        headers: new Headers(),
        ...testCase.request
      } as Request

      // Execute handler
      const response = await handler(mockRequest)

      // Assertions
      expect(response.status).toBe(testCase.expectedStatus)

      if (testCase.expectedResponse) {
        const responseData = await response.json()
        expect(responseData).toEqual(testCase.expectedResponse)
      }

      // Cleanup
      if (testCase.cleanup) await testCase.cleanup()
    })
  }
}

// ============================================================================
// EXPORTS
// ============================================================================

// Re-export testing library utilities for convenience
export * from '@testing-library/react'
export { userEvent }

// Export default render with providers
export { renderWithProviders as render }
